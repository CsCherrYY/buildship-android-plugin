/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.eclipse.jdt.ls.android;

import org.gradle.api.Action;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.UnknownTaskException;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.ConfigurationContainer;
import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency;
import org.gradle.plugins.ide.eclipse.model.EclipseModel;
import org.gradle.util.GradleVersion;

import java.util.Arrays;
import java.util.List;

public class JavaLanguageServerAndroidPlugin implements Plugin<Project> {

	public static final String DEFAULT_OUTPUT_MAIN = "bin/main";
	public static final String DEFAULT_OUTPUT_TEST = "bin/test";

	private static final String ANDROID_BASE_PLUGIN_ID = "com.android.base";
	private static final List<String> ANDROID_PLUGIN_IDS = Arrays.asList("android", "android-library", "com.android.application", "com.android.feature", "com.android.instantapp", "com.android.library", "com.android.test");

	public void apply(Project project) {
		project.afterEvaluate(new Action<Project>() {
			@Override
			public void execute(Project project) {
				if (!isAndroidProject(project)) {
					return;
				}
				// buildship indicator
				if (!project.hasProperty("eclipse")) {
					return;
				}
				EclipseModel eclipseModel = (EclipseModel) project.property("eclipse");
				// https://www.eclipse.org/community/eclipse_newsletter/2019/june/buildship.php
				if (GradleVersion.version(project.getGradle().getGradleVersion()).compareTo(GradleVersion.version("5.4")) >= 0) {
					try {
						if (project.getTasks().getByName("compileDebugSources") != null) {
							eclipseModel.synchronizationTasks("compileDebugSources");
						}
					} catch (UnknownTaskException e) {
						// Do nothing
					}
				}
				AddPlusConfigurationHandler.addPlusConfiguration(project, eclipseModel);
				eclipseModel.getClasspath().setDownloadSources(true);
				eclipseModel.getClasspath().getFile().whenMerged(new AddSourceFoldersAction(project));
				eclipseModel.getClasspath().getFile().whenMerged(new AddDataBindingClasspathAction(project));
				eclipseModel.getClasspath().getFile().whenMerged(new AddRClasspathAction(project));
				eclipseModel.getClasspath().getFile().whenMerged(new AddBootClasspathAction(project));
				eclipseModel.getClasspath().getFile().whenMerged(new GenerateLibraryDependenciesAction(project));
			}
		});
	}

	private boolean isAndroidProject(Project project) {
		if (project.getPlugins().hasPlugin(ANDROID_BASE_PLUGIN_ID)) {
			return true;
		}
		for (String pluginId : ANDROID_PLUGIN_IDS) {
			if (project.getPlugins().hasPlugin(pluginId)) {
				return true;
			}
		}
		return false;
	}
}
