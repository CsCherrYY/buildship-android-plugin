/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.eclipse.jdt.ls.android;

import org.gradle.api.Action;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.ConfigurationContainer;
import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency;
import org.gradle.plugins.ide.eclipse.model.EclipseModel;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

public class JavaLanguageServerAndroidPlugin implements Plugin<Project> {

	private static final String ANDROID_BASE_PLUGIN_ID = "com.android.base";
	private static final List<String> ANDROID_PLUGIN_IDS = Arrays.asList("android", "android-library", "com.android.application", "com.android.feature", "com.android.instantapp", "com.android.library", "com.android.test");

	public void apply(Project project) {
		project.afterEvaluate(new Action<Project>() {
			@Override
			public void execute(Project project) {
				if (!isAndroidProject(project)) {
					return;
				}
				// buildship indicator
				if (!project.hasProperty("eclipse")) {
					return;
				}
				EclipseModel eclipseModel = (EclipseModel) project.property("eclipse");
				Object android = project.property("android");
				Method[] methods = android.getClass().getMethods();
				ConfigurationContainer container = project.getConfigurations();
				try {
					Configuration config = container.getByName("debugAndroidTestRuntimeClasspath");
					Configuration config1 = container.getByName("implementation");
					config1.getDependencies().forEach(dep -> {
						if (dep instanceof DefaultProjectDependency) {
							if (((DefaultProjectDependency) dep).getTargetConfiguration() == null) {
								((DefaultProjectDependency) dep).setTargetConfiguration("default");
							}
						}
					});
					config1.setCanBeResolved(true);
					eclipseModel.getClasspath().getPlusConfigurations().addAll(Arrays.asList(config, config1));
				} catch (Exception e) {
					String test = "";
				}
				eclipseModel.getClasspath().getFile().beforeMerged(new AddSourceFoldersAction());
				eclipseModel.getClasspath().getFile().whenMerged(new GenerateLibraryDependenciesAction(project));
				eclipseModel.getClasspath().getFile().whenMerged(new AddBootClasspathAction(project));
			}


		});
	}

	private boolean isAndroidProject(Project project) {
		if (project.getPlugins().hasPlugin(ANDROID_BASE_PLUGIN_ID)) {
			return true;
		}
		for (String pluginId : ANDROID_PLUGIN_IDS) {
			if (project.getPlugins().hasPlugin(pluginId)) {
				return true;
			}
		}
		return false;
	}
}
