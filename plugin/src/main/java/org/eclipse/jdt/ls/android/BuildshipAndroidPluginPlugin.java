/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.eclipse.jdt.ls.android;

import groovy.lang.MissingPropertyException;
import org.gradle.api.Action;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.ConfigurationContainer;
import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency;
import org.gradle.plugins.ide.eclipse.model.EclipseModel;

import java.util.Arrays;

/**
 * A simple 'hello world' plugin.
 */
public class BuildshipAndroidPluginPlugin implements Plugin<Project> {
	public void apply(Project project) {
		project.afterEvaluate(new Action<Project>() {
			@Override
			public void execute(Project project) {
				// TODO: check property
				if (!project.hasProperty("android")) {
					return;
				}
				EclipseModel eclipseModel = eclipseModel(project);
				ConfigurationContainer container = project.getConfigurations();
				try {
					Configuration config = container.getByName("debugUnitTestRuntimeClasspath");
					Configuration config1 = container.getByName("implementation");
					config1.getDependencies().forEach(dep -> {
						if (dep instanceof DefaultProjectDependency) {
							if (((DefaultProjectDependency) dep).getTargetConfiguration() == null) {
								((DefaultProjectDependency) dep).setTargetConfiguration("default");
							}
						}
					});
					config1.setCanBeResolved(true);
					eclipseModel.getClasspath().getPlusConfigurations().addAll(Arrays.asList(config, config1));
				} catch (Exception e) {
					String test = "";
				}
				eclipseModel.getClasspath().getFile().beforeMerged(new AddSourceFoldersAction());
				eclipseModel.getClasspath().getFile().whenMerged(new GenerateLibraryDependenciesAction(project));
				eclipseModel.getClasspath().getFile().whenMerged(new AndroidSdkLibraryDependenciesAction(project));
			}
		});
	}

	private EclipseModel eclipseModel(Project project) {
		try {
			return (EclipseModel) project.property("eclipse");
		} catch (MissingPropertyException e) {
			throw new RuntimeException("Cannot find 'eclipse' property.\nEnsure that the following is in your project: \n\napply plugin: 'eclipse'\n\n", e);
		}
	}
}
